* Notes
* Features
** Visualization
1. Running
   1. Configure
      1. Time range
2. Workouts
   1. Configure
      1. Time range
      2. Workout type (Tags are pull, push, legs, run, mobility, skill)

** Storage

** Interaction

* Code
** Models
#+NAME: fitbit-models
#+begin_src python :tangle models.py
class Subject(object):
    pass


class Goal(Subject):
    pass


class Series(Subject):
    pass


class Exercise(object):
    pass


class Run(Exercise):
    pass
#+end_src
** Client
#+NAME: fitbit-client-utils
#+begin_src python :tangle client.py
def request(subject, activity):
    if subject == 'goal':
        pass

    def wrap(func):
        if activity == 'run':
            pass  # where to store

        def _wrap(*args, **kwargs):
            # transform to dataframe/org-table
            return func(*args, **kwargs)
        return _wrap
    return wrap
#+end_src

#+NAME: fitbit-client
#+begin_src python :tangle client.py
import os

import fitbit

import models


class MyFitbit(fitbit.Fitbit):
    def __init__(self):
        super().__init__(os.environ['FITBIT_CLIENT_ID'],
                         os.environ['FITBIT_CLIENT_SECRET'],
                         os.environ['FITBIT_ACCESS_TOKEN'])

    @request(models.Series, models.Run)
    def runs(self, period):
        self.time_series('activities/distance', period=period)
#+end_src
** Interact
#+NAME: fitbit-interact
#+begin_src python :results output
from client import MyFitbit


client = MyFitbit()

res = client.time_series('activities/distance', period='7d')

print(res)
#+end_src
