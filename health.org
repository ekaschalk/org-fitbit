* Features
** Fitbit
- task
  - org task -> add_alarm || update_alarm
  - delete task || manual -> delete_alarm
- workout
  - org capture workout -> log_activity
  - fitbit workout -> clean -> (add detail) -> org workout
  - capture
    - tags: ['mobility', 'pull', 'push', 'legs', 'skill', 'hike']
    - data: ['workout-link']
  - fitbit
    - tags: ['run', 'yoga', 'weights', 'treadmill']
    - data: ['distance', 'workout-link', 'avg-mph', 'time']


* API
** Alarms
add_alarm(device_id, alarm_time, week_days, recurring=False, enabled=True, label=None, snooze_length=None, snooze_count=None, vibe='DEFAULT')
delete_alarm(device_id, alarm_id)
update_alarm(device_id, alarm_id, alarm_time, week_days, recurring=False, enabled=True, label=None, snooze_length=None, snooze_count=None, vibe='DEFAULT')
** Activities
# No args -> gets, Args -> sets
activities_daily_goal(calories_out=None, active_minutes=None, floors=None, distance=None, steps=None)
activities_weekly_goal(distance=None, floors=None, steps=None)

# Time series (1min or 15min)
intraday_time_series(resource, base_date='today', detail_level='1min', start_time=None, end_time=None)
time_series(resource, user_id=None, base_date='today', period=None, end_date=None)

# GPS data can be retrieved using:
https://dev.fitbit.com/docs/activity/#get-activity-tcx
** Logging
# log - https://dev.fitbit.com/docs/activity/#log-activity
activities_list()  # all activities in tree structure
log_activity(data)
log_sleep(start_time, duration)
data = {
    "activityLog":{
        "activityId":12030,
        "activityParentId":90009,
        "calories":197,
        "description":"5 mph (12 min/mile)",
        "distance":3.34,  # only when relevant
        "duration":1800000,
        "isFavorite":false,
        "logId":132394,
        "name":"Running",
        "startTime":"12:20",
        "steps":2970  # walking or running only
    }
}
* Code
** Models
#+NAME: fitbit-models
#+begin_src python :tangle models.py
class Task(object):
    types = ['life', 'work', 'goal', 'fitness', 'habit']

    def __init__(self, task):
        self.task = task  # task is a parsed todo

class Subject(object):
    pass

class Goal(Subject):
    types = ['life', 'work', 'fitness']

class Series(Subject):
    pass


class Activity(object):
    pass


class FitbitResource(object):
    activities = [
        'steps', 'distance', 'floors', 'elevation',
        'calories', 'caloriesBMR', 'activityCalories',
        'minutesSedentary', 'minutesLightlyActive',
        'minutesFairlyActive', 'minutesVeryActive',
    ]
    sleep = [
        'startTime', 'timeInBed', 'efficiency', 'awakeningsCount',
        'minutesAwake','minutesAsleep',
        'minutesToFallAsleep', 'minutesAfterWakeup',
    ]
    body = ['bmi', 'fat', 'weight']
    heart = ['heart']


class Exercise(object):
    types = ['run', 'mobility', 'pull', 'push', 'legs', 'skill', 'hike']

#+end_src
** Client
#+NAME: fitbit-client
#+begin_src python :tangle client.py
import os

import fitbit

import models


def request(subject, activity):
    if subject == 'goal':
        pass

    def wrap(func):
        if activity == 'run':
            pass  # where to store

        def _wrap(*args, **kwargs):
            try:
                # transform to dataframe/org-table
                return func(*args, **kwargs)
            except:  # 429 -> rate limit, 150 per hour
                pass

        return _wrap
    return wrap


class MyFitbit(fitbit.Fitbit):
    def __init__(self):
        super().__init__(os.environ['FITBIT_CLIENT_ID'],
                         os.environ['FITBIT_CLIENT_SECRET'],
                         access_token=os.environ['FITBIT_ACCESS_TOKEN'])

    # @request(models.Series, models.Run)
    def runs(self, period):
        self.time_series('activities/distance', period=period)
#+end_src
** Interact
#+NAME: fitbit-request
#+begin_src python :results output
from client import MyFitbit


client = MyFitbit()

# res = client.time_series('activities/distance', period='7d')
res = client.activities_list()

print(res)
#+end_src

#+NAME: fitbit-interact
#+begin_src python :results output :var res=fitbit-request
import pandas as pd


df = eval(res)

df = pd.DataFrame(df['categories'])

# print(df)

# print(df['activities'][11])
# print(df['subCategories'][11])
df = df['subCategories'][11]

print([y['name'] for x in df for y in x['activities']])

'Stretching'
'Weights'
'Run'
'Treadmill'
#+end_src
