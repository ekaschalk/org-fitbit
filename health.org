* Notes
https://dev.fitbit.com/docs/basics/
https://dev.fitbit.com/apps/new
https://github.com/orcasgit/python-fitbit
http://python-fitbit.readthedocs.io/en/latest/
* Features
** Visualization
1. Running
   1. Configure
      1. Time range
2. Workouts
   1. Configure
      1. Time range
      2. Workout type (Tags are pull, push, legs, run, mobility, skill)

** Storage

** Interaction

* Code
#+begin_src python
import os

import fitbit


class Subject(object):
    pass


class Goal(Subject):
    pass


class Series(Subject):
    pass

###

class Exercise(object):
    pass


class Run(Exercise):
    pass

###

def request(subject, activity):
    if subject == 'goal':
        pass

    def wrap(func):
        if activity == 'run':
            pass  # where to store

        def _wrap(*args, **kwargs):
            # transform to dataframe/org-table
            return func(*args, **kwargs)
        return _wrap
    return wrap


class MyFitbit(fitbit.Fitbit):
    def __init__(self):
        super().__init__(os.environ['FITBIT_CLIENT_ID'],
                         os.environ['FITBIT_CLIENT_SECRET'],
                         os.environ['FITBIT_ACCESS_TOKEN'])

    @request(Series, Run)
    def runs(self, period):
        self.time_series('activities/distance', period=period)
#+end_src


#+begin_src python :results output
client = MyFitbit()

res = client.time_series('activities/distance', period='7d')

print(res)
#+end_src

#+RESULTS:
: {'activities-distance': [{'dateTime': '2017-01-15', 'value': '1.3654010573008'}, {'dateTime': '2017-01-16', 'value': '2.95056867778816'}, {'dateTime': '2017-01-17', 'value': '2.65240371130696'}, {'dateTime': '2017-01-18', 'value': '3.27022687380064'}, {'dateTime': '2017-01-19', 'value': '2.8367459028376'}, {'dateTime': '2017-01-20', 'value': '1.6298566366159999'}, {'dateTime': '2017-01-21', 'value': '5.18485171399832'}]}
